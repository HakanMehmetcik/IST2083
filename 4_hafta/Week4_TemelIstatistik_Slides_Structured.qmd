---
title: "IST2083 · Hafta 4 — Temel İstatistik (Yapılandırılmış)"
author: "Doç. Dr. Hakan Mehmetcik"
date: "`r format(Sys.Date())`"
format:
  revealjs:
    theme: [default]
    slide-number: c
    history: true
    hash: true
    incremental: true
    toc: true
    toc-depth: 2
    chalkboard: true
    code-fold: false
    code-overflow: wrap
    code-line-numbers: true
    transition: fade
    smaller: true
    footer: "IST2083 · Marmara Üniversitesi"
execute:
  echo: true
  warning: false
  message: false
  cache: true
editor: visual
---

```{r setup}
# Tekrarlanabilirlik
set.seed(2083)

# Paketler
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
library(broom)
library(nycflights13)
theme_set(theme_minimal(base_size = 14))
```

## Ders Akışı ve Beklenti

-   Her konu **4 adım** ile gider: **Kavram → Kod → Görsel/Çıktı → Yorum**\
-   Kod hücrelerinde satır içi **yorumlar** var; çıktıdan sonra **yorum** slaytı gelir.
-   Amaç: Çıkarıma geçmeden önce **sağlam betimleme** alışkanlığı.

------------------------------------------------------------------------

## 1) Kategorik Değişkenler — *Kavram*

-   **Frekans** ve **yüzde** ile özetleriz.
-   Grafik: **çubuk grafiği**; yüzde etiketi okunurluğu artırır.
-   Hata: Toplamı belirtmeden yüzde raporlamak.

------------------------------------------------------------------------

## 1) Kategorik Değişkenler — *Kod*

```{r}
# Örnek veri: kitap okuma kategorileri ve sayıları
books <- tibble(
  category = c("no_books", "print_only", "digital_only", "print_and_digital"),
  n = c(395, 577, 91, 425)
)

# 1) Yüzde hesapla
books <- books |> mutate(prop = n / sum(n))

# 2) Etiketleri Türkçeleştir
books <- books |>
  mutate(label = recode(category,
                        no_books = "Hiç kitap yok",
                        print_only = "Sadece basılı",
                        digital_only = "Sadece dijital",
                        print_and_digital = "Basılı + Dijital"))

# 3) Grafik (yüzde etiketiyle)
p_books <- books |>
  ggplot(aes(label, n)) +
  geom_col() +
  geom_text(aes(label = scales::percent(prop, accuracy = 0.1)), vjust = -0.4) +
  labs(x = NULL, y = "Kişi", title = "Kitap Okuma Kategorileri") +
  theme(axis.text.x = element_text(angle = 15, hjust = 1))
```

------------------------------------------------------------------------

## 1) Kategorik Değişkenler — *Görsel/Çıktı*

```{r}
p_books
books |> select(label, n, prop)
```

------------------------------------------------------------------------

## 1) Kategorik Değişkenler — *Yorum*

-   En yaygın kategori **Sadece basılı**.
-   **Yüzde** bilgisi, salt frekansa göre **kıyaslamayı** kolaylaştırır.
-   Raporlarken: *Toplam N* ve kategoriler arası **sıralamayı** belirtin.

------------------------------------------------------------------------

## 2) Çapraz Tablo (Titanic) — *Kavram*

-   İki kategorik değişkenin ilişkisi: **çapraz tablo**.
-   Yüzdeleri genellikle **sütun içinde** veya **satır içinde** hesaplarız; bağlama göre seçeriz.
-   Grafik: yığın veya **yüzde yığın**.

------------------------------------------------------------------------

## 2) Çapraz Tablo (Titanic) — *Kod*

```{r}
# Titanic veri setini tidy forma aç
Titanic_df <- as_tibble(as.data.frame(Titanic)) |> janitor::clean_names()

# Cinsiyet × Hayatta Kalma özet
sex_surv <- Titanic_df |>
  group_by(sex, survived) |>
  summarise(n = sum(freq), .groups = "drop") |>
  group_by(survived) |>
  mutate(p_col = n / sum(n))  # sütun içi yüzde

# Grafik: yığın ve yüzde yığın
p_stack  <- ggplot(sex_surv, aes(sex, n, fill = survived)) + geom_col() +
  labs(title = "Titanic: Cinsiyet × Hayatta Kalma (Yığın)",
       x = NULL, y = "Kişi")

p_fill   <- ggplot(sex_surv, aes(sex, n, fill = survived)) +
  geom_col(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Titanic: Cinsiyet × Hayatta Kalma (Yüzde Yığın)",
       x = NULL, y = "Oran")
```

------------------------------------------------------------------------

## 2) Çapraz Tablo (Titanic) — *Görsel/Çıktı*

```{r}
p_stack
p_fill
sex_surv |> select(sex, survived, n, p_col)
```

------------------------------------------------------------------------

## 2) Çapraz Tablo (Titanic) — *Yorum*

-   **Yığın** grafikte mutlak farklar, **yüzde yığında** ise göreli oranlar öne çıkar.
-   Cinsiyete göre hayatta kalma oranları **farklı**; yüzde yığın bunu daha iyi gösterir.

------------------------------------------------------------------------

## 3) Sayısal Değişkenler — *Kavram*

-   **Merkez**: Ortalama, Medyan, (Trimmed Mean)\n- **Yayılım**: Varyans, SD, **IQR**, Aralık\n- Aykırı değerlere karşı **medyan** ve **IQR** daha dayanıklı.

------------------------------------------------------------------------

## 3) Sayısal Değişkenler — *Kod*

```{r}
veri <- c(34, 67, 23, 45, 89, 12, 56, 78, 99, 5, 62, 48, 39, 75, 80, 22, 90, 11, 36, 50)

# Özet tablo
tab_num <- tibble(
  istatistik = c("Ortalama","Medyan","Trimmed Mean (10%)","Varyans","Standart Sapma","IQR","Aralık"),
  deger = c(mean(veri), median(veri), mean(veri, trim = .10),
            var(veri), sd(veri), IQR(veri), diff(range(veri)))
) |> mutate(deger = round(deger, 2))

# Histogram + yoğunluk
p_num <- as_tibble(veri) |> ggplot(aes(value)) +
  geom_histogram(bins = 10) +
  geom_density(adjust = 1.2) +
  labs(title = "Dağılımın Görsel Özeti", x = NULL, y = NULL)
```

------------------------------------------------------------------------

## 3) Sayısal Değişkenler — *Görsel/Çıktı*

```{r}
tab_num
p_num
```

------------------------------------------------------------------------

## 3) Sayısal Değişkenler — *Yorum*

-   **Ortalama** aykırılara duyarlı; **medyan** daha dayanıklı.
-   **IQR** orta yüzde 50 yayılımı; **SD** tüm veri yayılımını özetler.

------------------------------------------------------------------------

## 4) ECDF & Kutu/Violin — *Kavram*

-   **ECDF**: “x’in altında kaç pay var?” sorusuna yanıt (tüm dağılımı gösterir).
-   **Kutu/violin**: Medyan, IQR ve olası aykırı değerleri bir bakışta.

------------------------------------------------------------------------

## 4) ECDF & Kutu/Violin — *Kod*

```{r}
fl <- nycflights13::flights |>
  select(dep_delay, arr_delay, distance, air_time, carrier)

# ECDF
p_ecdf <- fl |> filter(!is.na(arr_delay)) |>
  ggplot(aes(arr_delay)) + stat_ecdf(geom = "step") +
  labs(title = "Varış Gecikmesi ECDF", x = "Dakika", y = "F(x)")

# Kutu + violin
p_boxv <- fl |> filter(!is.na(dep_delay)) |>
  ggplot(aes(x = carrier, y = dep_delay)) +
  geom_violin(trim = TRUE) +
  geom_boxplot(width = .15) +
  coord_cartesian(ylim = quantile(fl$dep_delay, c(.01, .99), na.rm = TRUE)) +
  labs(title = "Taşıyıcıya Göre Kalkış Gecikmesi", x = NULL, y = "dk") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

------------------------------------------------------------------------

## 4) ECDF & Kutu/Violin — *Görsel/Çıktı*

```{r}
p_ecdf
p_boxv
```

------------------------------------------------------------------------

## 4) ECDF & Kutu/Violin — *Yorum*

-   ECDF ile “%80 uçuş **x** dakikanın altında gecikiyor mu?” gibi **eşik** soruları cevaplanır.
-   Kutu/violin, **medyan sırası** ve **yayılım** farklarını karşılaştırmada idealdir.

------------------------------------------------------------------------

## 5) Korelasyon — *Kavram*

-   Pearson: **doğrusal** ilişki; Spearman: **sıralı/monotonik** ilişki.
-   **Korelasyon ≠ Nedensellik**; üçüncü değişken riski.

------------------------------------------------------------------------

## 5) Korelasyon — *Kod*

```{r}
num_fl <- fl |> select(dep_delay, arr_delay, distance, air_time) |> drop_na()

# Hızlı keşif: ggpairs
p_pairs <- GGally::ggpairs(num_fl, progress = FALSE)

# Korelasyon matrisleri
cor_pearson  <- round(cor(num_fl, method = "pearson"), 3)
cor_spearman <- round(cor(num_fl, method = "spearman"), 3)
```

------------------------------------------------------------------------

## 5) Korelasyon — *Görsel/Çıktı*

```{r}
p_pairs
cor_pearson
cor_spearman
```

------------------------------------------------------------------------

## 5) Korelasyon — *Yorum*

-   `dep_delay` ile `arr_delay` yüksek **pozitif** korelasyon.
-   Spearman, aykırı/lineer olmayan durumlarda **daha sağlam** olabilir.

------------------------------------------------------------------------

## 6) Anscombe Dörtlüsü — *Kavram*

-   Aynı korelasyon/ortalama ≠ aynı **ilişki yapısı**.
-   Mesaj: **Önce görselleştir!**

------------------------------------------------------------------------

## 6) Anscombe Dörtlüsü — *Kod*

```{r}
ad <- as_tibble(anscombe)

cors <- sapply(1:4, function(i) cor(ad[[paste0("x", i)]], ad[[paste0("y", i)]]))

ps <- purrr::map(1:4, ~{
  ggplot(ad, aes(x = .data[[paste0("x", .x)]], y = .data[[paste0("y", .x)]])) +
    geom_point(size = 2) +
    geom_smooth(method = lm, se = FALSE) +
    labs(title = paste0("Çift ", .x))
})
if (!requireNamespace("patchwork", quietly = TRUE)) install.packages("patchwork")
library(patchwork)
p_ans <- (ps[[1]] | ps[[2]]) / (ps[[3]] | ps[[4]])
```

------------------------------------------------------------------------

## 6) Anscombe Dörtlüsü — *Görsel/Çıktı*

```{r}
cors
p_ans
```

------------------------------------------------------------------------

## 6) Anscombe Dörtlüsü — *Yorum*

-   Korelasyonlar **benzer**, desenler **çok farklı**.
-   Tek sayı yerine **grafik + bağlam** şart.

------------------------------------------------------------------------

## 7) Eksik Veri — *Kavram*

-   **Listwise (complete.obs)** vs **pairwise** stratejileri farklı sonuçlar verebilir.
-   Doldurma (medyan/ortalama) korelasyonları **saptırabilir**; dikkat.

------------------------------------------------------------------------

## 7) Eksik Veri — *Kod*

```{r}
list(
  complete_obs = round(cor(num_fl, use = "complete.obs"), 3),
  pairwise     = round(cor(num_fl, use = "pairwise.complete.obs"), 3)
)
```

------------------------------------------------------------------------

## Mini Proje (10–15 dk)

**Soru:** Hangi taşıyıcıların kalkış gecikmesi dağılımı daha *sağlam*?\
**Yöntem:** Medyan & IQR; `group_by(carrier)` → `summarise()` → kutu grafiği.\
**Çıktı:** 1 tablo + 1 grafik + 5–6 cümle yorum.

```{r}
summary_tbl <- fl |> 
  group_by(carrier) |> 
  summarise(n = n(), medyan = median(dep_delay, na.rm = TRUE), IQR = IQR(dep_delay, na.rm = TRUE)) |> 
  arrange(medyan)
summary_tbl
```

------------------------------------------------------------------------

## Hızlı Quiz (5)

1.  IQR nasıl hesaplanır?\
2.  Trimmed mean neye duyarsızdır?\
3.  Çapraz tabloda **sütun yüzdesi** neyi anlatır?\
4.  Pearson vs Spearman farkı?\
5.  Anscombe dörtlüsünün ana mesajı nedir?
